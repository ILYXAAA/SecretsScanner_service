c:
- char* api_key = "$TOKEN$";
- const char* password = "$PASSWORD$";
- char auth_token[] = "$JWT$";
- '#define API_SECRET "$TOKEN$"'
- static const char* db_password = "$PASSWORD$";
- curl_easy_setopt(curl, CURLOPT_USERPWD, "$LOGIN$:$PASSWORD$");
- ssl_connect("$URL$", "$PRIVATE_KEY$");
- char* token = getenv("$SECRET_VARIABLE$");
- setenv("API_KEY", "$TOKEN$", 1);
- if (getenv("$SECRET_VARIABLE$") == NULL) password = "$DEFAULT_PASSWORD$";
- config.api_key = "$TOKEN$";
- settings.database_url = "postgresql://$LOGIN$:$PASSWORD$@$URL$";
- server_config.ssl_key = "$PRIVATE_KEY$";
- FILE* fp = fopen("/etc/passwd", "r"); /* contains $LOGIN$:$PASSWORD$ */
- fprintf(config_file, "password=%s\\n", "$PASSWORD$");
- write_config("api_token", "$TOKEN$");
conf:
- proxy_pass http://$URL$:$PORT$/;
- DATABASE_URL=postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db'
- $URL$ ansible_user=$LOGIN$ ansible_password=$PASSWORD$
- user => "$LOGIN$" password => "$PASSWORD$"}}
env:
- API_KEY="$TOKEN$"
- SECRET_KEY="$PASSWORD$"
- DATABASE_PASSWORD="$PASSWORD$"
- JWT_SECRET="$JWT$"
- GITHUB_TOKEN="$GITHUB_TOKEN$"
- SLACK_TOKEN="$SLACK_TOKEN$"
- TELEGRAM_BOT_TOKEN="$TELEGRAM_TOKEN$"
- DB_PASSWORD="$PASSWORD$"
- DATABASE_URL="postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db"
- MONGODB_URI="mongodb://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db"
- AZURE_CLIENT_SECRET="$TOKEN$"
- DOCKER_REGISTRY_PASSWORD="$PASSWORD$"
- CI_REGISTRY_PASSWORD="$PASSWORD$"
- CI_JOB_TOKEN="$TOKEN$"
- GITLAB_TOKEN="$TOKEN$"
- JENKINS_API_TOKEN="$TOKEN$"
- SESSION_SECRET="$PASSWORD$"
- WEBHOOK_SECRET="$TOKEN$"
- API_SECRET="$PASSWORD$"
- SSH_PRIVATE_KEY="$SSH_PRIVATE_KEY$"
- GIT_TOKEN="$GITHUB_TOKEN$"
- DEPLOY_KEY="$SSH_PRIVATE_KEY$"
- DATADOG_API_KEY="$TOKEN$"
- LOGZ_IO_TOKEN="$TOKEN$"
- ELASTIC_PASSWORD="$PASSWORD$"
- REDIS_PASSWORD="$PASSWORD$"
- MEMCACHED_PASSWORD="$PASSWORD$"
- S3_SECRET_KEY="$TOKEN$"
- OAUTH_CLIENT_SECRET="$TOKEN$"
- AUTH0_CLIENT_SECRET="$TOKEN$"
- GOOGLE_CLIENT_SECRET="$TOKEN$"
- FACEBOOK_APP_SECRET="$TOKEN$"
- API_KEY=$TOKEN$
- DATABASE_PASSWORD=$PASSWORD$
- JWT_SECRET=$JWT$
- GITHUB_TOKEN=$GITHUB_TOKEN$
java:
- spring.datasource.password=$PASSWORD$
- spring.datasource.url=jdbc:mysql://$URL$:$PORT$/db?user=$LOGIN$&password=$PASSWORD$
- '@Value("${api.key}") private String apiKey = "$TOKEN$";'
- spring.security.oauth2.client.registration.github.client-secret=$TOKEN$
- jwt.secret=$JWT$
- server.ssl.key-store-password=$PASSWORD$
- MongoClients.create("mongodb://$LOGIN$:$PASSWORD$@$URL$");
- BasicDataSource(); dataSource.setPassword("$PASSWORD$");
- BasicAWSCredentials("$TOKEN$", "$TOKEN$");
- props.setProperty("password", "$PASSWORD$");
- ConfigurationBuilder().oAuthAccessToken("$TOKEN$");
- String API_KEY = "$TOKEN$";
- String SECRET = "$PASSWORD$";
- new SecretKeySpec("$TOKEN$".getBytes(), "AES");
- mac.init(new SecretKeySpec("$HMAC$".getBytes(), "HmacSHA256"));
- '{ return new PasswordAuthentication("$LOGIN$", "$PASSWORD$"); }});'
- props.put("mail.smtp.password", "$PASSWORD$");
- session.setPassword("$PASSWORD$");
- withOAuthToken("$GITHUB_TOKEN$").build();
- newBuilder().header("Authorization", "token $GITHUB_TOKEN$").build())).build();
- 'System.out.println("Secret: " + "$PASSWORD$");'
- 'log.debug("Connecting with token: {$TOKEN$}");'
- slack.methods("$SLACK_TOKEN$");
- slackApi.setToken("$SLACK_TOKEN$");
- docker.auth(RegistryAuth.builder().password("$PASSWORD$").build());
- env("API_KEY=$TOKEN$").build();
- required username=\"$LOGIN$\" password=\"$PASSWORD$\";");
javascript:
- process.env.API_KEY = "$TOKEN$"
- const secret = process.env.$SECRET_VARIABLE$ || "$DEFAULT_PASSWORD$"
- 'module.exports = { apiKey: "$TOKEN$", secret: "$PASSWORD$" }'
- 'got("$URL$", { headers: { "Authorization": "Token $TOKEN$" } })'
- 'app.use(session({ secret: "$PASSWORD$", resave: false }))'
- const token = jwt.sign(payload, "$JWT$")
- app.set("jwt-secret", "$JWT$")
- MongoClient("mongodb://$LOGIN$:$PASSWORD$@$URL$")
- 'Pool({ host: "$URL$", user: "$LOGIN$", password: "$PASSWORD$" })'
- mongoose.connect("mongodb://$LOGIN$:$PASSWORD$@$URL$/db")
- 'redis.createClient({ password: "$PASSWORD$" })'
- 'AWS.config.update({ accessKeyId: "$TOKEN$", secretAccessKey: "$TOKEN$" })'
- 'AWS.S3({ accessKeyId: "$TOKEN$", secretAccessKey: "$TOKEN$" })'
- 'accessKeyId: "$TOKEN$", secretAccessKey: "$TOKEN$" } })'
- const token = jwt.sign(payload, "$JWT$")
- jwt.verify(token, "$JWT$", (err, decoded) => {})
- new WebClient("$SLACK_TOKEN$")
- SlackWebhook("$SLACK_TOKEN$")
- 'slack.send({ token: "$SLACK_TOKEN$", text: "Hello" })'
- bot.token = "$TELEGRAM_TOKEN$"
- 'const config = { apiKey: "$TOKEN$", secret: "$PASSWORD$", url: "$URL$" }'
- 'default { API_TOKEN: "$TOKEN$", DB_PASSWORD: "$PASSWORD$" }'
- 'window.config = { bearerToken: "$BEARER_TOKEN$" }'
- 'JSON.parse(\{ "token": "$TOKEN$", "password": "$PASSWORD$" }\)'
- localStorage.setItem("authToken", "$JWT$")
- sessionStorage.setItem("apiKey", "$TOKEN$")
- localStorage.getItem("$SECRET_VARIABLE$") || "$DEFAULT_PASSWORD$"
- common["Authorization"] = `Bearer ${API_KEY}`
- 'createContext({ apiKey: "$TOKEN$" })'
- $store.commit("setToken", "$TOKEN$")
- environment.apiKey = "$TOKEN$"
- 'io("$URL$", { auth: { token: "$TOKEN$" } })'
- 'socket.emit("authenticate", { token: "$JWT$" })'
- 'Docker({ socketPath: "/var/run/docker.sock" }); container.exec({ Env: ["API_KEY=$TOKEN$"]
  })'
- '({ getToken: () => "$TOKEN$" }))'
- '.reply(200, { token: "$TOKEN$" })'
- expect(response.data.token).toBe("$JWT$")
- 'winston.info("Authentication token: %s", "$TOKEN$")'
- 'logger.debug({ token: "$TOKEN$" }, "Authentication successful")'
other:
- ssh_private_key = """$SSH_PRIVATE_KEY$"""
- $SSH_PRIVATE_KEY$
- $SSH_PRIVATE_KEY$
- ssh -i /path/to/key <<< "$SSH_PRIVATE_KEY$"
- private_key = "$SSH_PRIVATE_KEY$"
- os.environ["SSH_KEY"] = "$SSH_PRIVATE_KEY$"
- 'signature = hmac.new(secret.encode(), msg.encode(), hashlib.sha256).hexdigest()  #
  $HMAC$'
- password = "$DEFAULT_PASSWORD$"
- passwd = "$DEFAULT_PASSWORD$"
- os.environ["DEFAULT_PASSWORD"] = "$DEFAULT_PASSWORD$"
- config["password"] = "$DEFAULT_PASSWORD$"
- '"default_password": "$DEFAULT_PASSWORD$"'
- 'credentials = {"username": "admin", "password": "$DEFAULT_PASSWORD$"}'
- PASSWORD="$DEFAULT_PASSWORD$"
- spring.datasource.password=$DEFAULT_PASSWORD$
- -Ddb.password=$DEFAULT_PASSWORD$
- db_password="$DEFAULT_PASSWORD$"
- '"auth": { "password": "$DEFAULT_PASSWORD$" }'
- wget --user=$LOGIN$ --password=$PASSWORD$ $URL$
- scp -i $SSH_PRIVATE_KEY$ file.txt $LOGIN$@$URL$:$PORT$
- ssh -i $SSH_PRIVATE_KEY$ $LOGIN$@$URL$ -p $PORT$
- rsync -e "ssh -i $SSH_PRIVATE_KEY$" file.txt $LOGIN$@$URL$:/
- 'X-API-Key: $TOKEN$, X-Secret: $PASSWORD$'
- Basic $LOGIN$:$PASSWORD$@$URL$:$PORT$ with token $TOKEN$
- 'INFO: User $LOGIN$ authenticated with token $TOKEN$ from $URL$'
- 'ERROR: Failed to connect to $URL$:$PORT$ with credentials $LOGIN$:$PASSWORD$'
- 'DEBUG: JWT token $JWT$ expired for user $LOGIN$'
- server=$URL$:$PORT$, user=$LOGIN$, pass=$PASSWORD$, token=$TOKEN$
- host=$URL$, port=$PORT$, ssl_key=$PRIVATE_KEY$, password=$PASSWORD$
- redis_url=redis://:$PASSWORD$@$URL$:$PORT$, api_key=$TOKEN$
- '{"host": "$URL$", "user": "$LOGIN$", "password": "$PASSWORD$", "port": $PORT$}'
- <credentials user="$LOGIN$" password="$PASSWORD$" token="$TOKEN$"/>
- docker run -e API_KEY=$TOKEN$ -e DB_PASS=$PASSWORD$ app:latest
- kubectl create secret generic mysecret --from-literal=password=$PASSWORD$ --from-literal=token=$TOKEN$
- helm install app --set database.password=$PASSWORD$ --set api.token=$TOKEN$
- 'telnet $URL$ $PORT$ (login: $LOGIN$, password: $PASSWORD$)'
- 'rclone copy local: remote: --config password=$PASSWORD$'
- 'nc -zv $URL$ $PORT$ # credentials stored: $TOKEN$'
- 'POST $URL$/api/login {"username": "$LOGIN$", "password": "$PASSWORD$"}'
- GET $URL$/api/data?token=$TOKEN$&key=$PASSWORD$
- 'curl -X POST $URL$ -H "X-Token: $TOKEN$" -d "secret=$PASSWORD$"'
- httpie POST $URL$/auth username=$LOGIN$ password=$PASSWORD$ token:=$JWT$
- openssl req -new -key $PRIVATE_KEY$ -out cert.csr
- keytool -import -file cert.crt -keystore keystore.jks -storepass $PASSWORD$
- SSL_CERT=$URL$.crt SSL_KEY=$PRIVATE_KEY$ nginx
- 'mock_auth = {"user": "$LOGIN$", "pass": "$PASSWORD$", "token": "$JWT$"}'
- 'test_config = {"api_url": "$URL$", "api_key": "$TOKEN$", "timeout": 30}'
- selenium.get("$URL$"); selenium.find_element("password").send_keys("$PASSWORD$")
- newman run collection.json --env-var token=$TOKEN$ --env-var url=$URL$
- 'BREACH: Token $TOKEN$ compromised, rotating keys'
- 'SECURITY: Failed SSH attempt with key $SSH_PRIVATE_KEY$ to $URL$'
- slack_webhook=$SLACK_TOKEN$, telegram_bot=$TELEGRAM_TOKEN$, github_key=$GITHUB_TOKEN$
- 'sso_config: provider=$URL$, client_secret=$TOKEN$, redirect=$URL$/callback'
- 'payment_gateway: api_key=$TOKEN$, webhook_secret=$HMAC$, endpoint=$URL$'
- 'cdn_config: host=$URL$, token=$TOKEN$, ssl_cert=$PRIVATE_KEY$'
other2:
- token=$TOKEN$
- token=$TOKEN$[7:30]
- token = $TOKEN$[7:30]
- 'token: $TOKEN$[7:30]'
- Token=$TOKEN$
- Token=$TOKEN$[7:30]
- Token = $TOKEN$[7:30]
- 'Token: $TOKEN$[7:30]'
- apikey=$TOKEN$
- apikey=$TOKEN$[10:28]
- apikey = $TOKEN$[10:28]
- 'apikey: $TOKEN$[10:28]'
- api_key=$TOKEN$
- api_key=$TOKEN$[10:28]
- api_key = $TOKEN$[10:28]
- 'api_key: $TOKEN$[10:28]'
- API_KEY=$TOKEN$
- API_KEY=$TOKEN$[10:28]
- API_KEY = $TOKEN$[10:28]
- 'API_KEY: $TOKEN$[10:28]'
- ApiKey=$TOKEN$
- ApiKey=$TOKEN$[10:28]
- ApiKey = $TOKEN$[10:28]
- 'ApiKey: $TOKEN$[10:28]'
- secret_key=$TOKEN$
- secret_key=$TOKEN$[10:28]
- secret_key = $TOKEN$[10:28]
- 'secret_key: $TOKEN$[10:28]'
- SecretKey=$TOKEN$
- SecretKey=$TOKEN$[10:28]
- SecretKey = $TOKEN$[10:28]
- 'SecretKey: $TOKEN$[10:28]'
- Passwd=$TOKEN$
- Passwd=$TOKEN$[10:28]
- Passwd = $TOKEN$[10:28]
- 'Passwd: $TOKEN$[10:28]'
- secret=$TOKEN$
- secret=$TOKEN$[10:28]
- secret = $TOKEN$[10:28]
- 'secret: $TOKEN$[10:28]'
- Creds=$TOKEN$
- Creds=$TOKEN$[10:28]
- Creds = $TOKEN$[10:28]
- 'Creds: $TOKEN$[10:28]'
- password=$TOKEN$
- password=$TOKEN$[10:28]
- password = $TOKEN$[10:28]
- 'password: $TOKEN$[10:28]'
- $SLACK_TOKEN$
- $PRIVATE_KEY$
- $SSH_PRIVATE_KEY$
- $URL$?token=$JWT$
- $GITHUB_TOKEN$|$SLACK_TOKEN$
- $TELEGRAM_TOKEN$,$SLACK_TOKEN$
- $SLACK_TOKEN$/$TELEGRAM_TOKEN$
- $SLACK_TOKEN$=$BEARER_TOKEN$
password_in_url:
- connection_string=Server=$URL$;Database=db;User Id=$LOGIN$;Password=$PASSWORD$
python:
- telegram_bot = telegram.Bot(token="$TELEGRAM_TOKEN$")
- updater = Updater(token="$TELEGRAM_TOKEN$", use_context=True)
- os.environ["$SECRET_VARIABLE$"] = "$TOKEN$"
- os.environ["$SECRET_VARIABLE$"] = "$DEFAULT_PASSWORD$"
- os.getenv("$SECRET_VARIABLE$", "$DEFAULT_PASSWORD$")
- load_dotenv(); SECRET = os.environ.get("$SECRET_VARIABLE$")
- 'requests.patch("$URL$", headers={"Authorization": "Token $TOKEN$"})'
- urllib.request.urlopen("$URL$?api_key=$TOKEN$")
- app.config['SECRET_KEY'] = '$DEFAULT_PASSWORD$'
- app.config['DATABASE_URL'] = 'postgresql://$LOGIN$:$PASSWORD$@localhost/db'
- SECRET_KEY = '$TOKEN$'
- 'DATABASES = {''default'': {''PASSWORD'': ''$DEFAULT_PASSWORD$''}}'
- app.secret_key = '$TOKEN$'
- JWT_SECRET_KEY = '$JWT$'
- conn = psycopg2.connect(host='$URL$', user='$LOGIN$', password='$PASSWORD$')
- engine = create_engine('mysql://$LOGIN$:$PASSWORD$@$URL$/db')
- client = pymongo.MongoClient('mongodb://$LOGIN$:$PASSWORD$@$URL$')
- connection = sqlite3.connect('database.db', password='$PASSWORD$')
- redis_client = redis.Redis(password="$DEFAULT_PASSWORD$", host="$URL$", port=$PORT$)
- r = redis.StrictRedis(host="$URL$", password="$PASSWORD$", decode_responses=True)
- redis_pool = redis.ConnectionPool(host="$URL$", password="$PASSWORD$")
- token = jwt.encode(payload, "$JWT$", algorithm="HS256")
- jwt_token = "$JWT$"
- 'headers = {"Authorization": "token $GITHUB_TOKEN$"}'
- g = Github(login_or_token="$GITHUB_TOKEN$")
- client = WebClient(token="$SLACK_TOKEN$")
- slack_token = "$SLACK_TOKEN$"
- bot = SlackBot("$SLACK_TOKEN$")
- service = build("gmail", "v1", credentials=creds)
- client = storage.Client.from_service_account_json("$PRIVATE_KEY$")
- 'config = {"api_key": "$TOKEN$", "secret": "$PASSWORD$"}'
- 'settings = {"DATABASE_PASSWORD": "$PASSWORD$", "SECRET_KEY": "$TOKEN$"}'
- API_TOKEN = "$TOKEN$"
- API_KEY = "$TOKEN$"
- SECRET = "$PASSWORD$"
- 'with open("config.json") as f: data = json.load(f); token = data["$TOKEN$"]'
- yaml.safe_load(f)["credentials"]["$SECRET_VARIABLE$"]
- assert response.json()["token"] == "$TOKEN$"
- celery_app.conf.update(broker_url="amqp://$LOGIN$:$PASSWORD$@$URL$")
slack_token:
- new WebClient("$SLACK_TOKEN$");
- WebClient(token="$SLACK_TOKEN$")
- slack.methods("$SLACK_TOKEN$");
- SlackApi("$SLACK_TOKEN$");
- 'curl -H "Authorization: Bearer $SLACK_TOKEN$"'
- 'requests.post(headers={"Authorization": "Bearer $SLACK_TOKEN$"})'
- 'fetch({ headers: { "Authorization": "Bearer $SLACK_TOKEN$" } })'
- SLACK_TOKEN="$SLACK_TOKEN$"
- SLACK_BOT_TOKEN=$SLACK_TOKEN$
- SLACK_API_TOKEN=$SLACK_TOKEN$
- 'slack_token: "$SLACK_TOKEN$"'
- token=$SLACK_TOKEN$
- api_key=$SLACK_TOKEN$
- webhook_url=$URL$/$SLACK_TOKEN$
- 'curl -X POST $URL$/$SLACK_TOKEN$ -H "Content-type: application/json"'
