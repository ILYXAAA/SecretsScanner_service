python:
  # Telegram Bot
  - 'bot = telebot.TeleBot("$TELEGRAM_TOKEN$", parse_mode=None)'
  - 'telegram_bot = telegram.Bot(token="$TELEGRAM_TOKEN$")'
  - 'updater = Updater(token="$TELEGRAM_TOKEN$", use_context=True)'
  
  # Environment Variables
  - 'os.environ["$SECRET_VARIABLE$"] = "$TOKEN$"'
  - 'os.environ["$SECRET_VARIABLE$"] = "$DEFAULT_PASSWORD$"'
  - 'os.getenv("$SECRET_VARIABLE$", "$DEFAULT_PASSWORD$")'
  - 'load_dotenv(); SECRET = os.environ.get("$SECRET_VARIABLE$")'
  
  # HTTP Requests/API
  - 'requests.post("$URL$", headers={"Authorization": "Bearer $JWT$"})'
  - 'requests.get("$URL$", headers={"X-API-Key": "$TOKEN$"})'
  - 'response = requests.post("$URL$", auth=("$LOGIN$", "$PASSWORD$"))'
  - 'headers = {"Authorization": "Basic $BASIC_AUTH$"}'
  - 'requests.patch("$URL$", headers={"Authorization": "Token $TOKEN$"})'
  - 'urllib.request.urlopen("$URL$?api_key=$TOKEN$")'
  - 'httpx.get("$URL$", headers={"Bearer": "$JWT$"})'
  
  # Flask/Django
  - "app.config['SECRET_KEY'] = '$DEFAULT_PASSWORD$'"
  - "app.config['DATABASE_URL'] = 'postgresql://$LOGIN$:$PASSWORD$@localhost/db'"
  - "SECRET_KEY = '$TOKEN$'"
  - "DATABASES = {'default': {'PASSWORD': '$DEFAULT_PASSWORD$'}}"
  - "app.secret_key = '$TOKEN$'"
  - "JWT_SECRET_KEY = '$JWT$'"
  
  # Database Connections
  - "conn = psycopg2.connect(host='$URL$', user='$LOGIN$', password='$PASSWORD$')"
  - "engine = create_engine('mysql://$LOGIN$:$PASSWORD$@$URL$/db')"
  - "client = pymongo.MongoClient('mongodb://$LOGIN$:$PASSWORD$@$URL$')"
  - "connection = sqlite3.connect('database.db', password='$PASSWORD$')"
  
  # Redis
  - 'redis_client = redis.Redis(password="$DEFAULT_PASSWORD$", host="$URL$", port=$PORT$)'
  - 'r = redis.StrictRedis(host="$URL$", password="$PASSWORD$", decode_responses=True)'
  - 'redis_pool = redis.ConnectionPool(host="$URL$", password="$PASSWORD$")'
  
  # JWT Tokens
  - 'token = jwt.encode(payload, "$JWT$", algorithm="HS256")'
  - 'decoded = jwt.decode("$JWT$", "$TOKEN$", algorithms=["HS256"])'
  - 'jwt_token = "$JWT$"'
  
  # GitHub API
  - 'github = Github("$GITHUB_TOKEN$")'
  - 'headers = {"Authorization": "token $GITHUB_TOKEN$"}'
  - 'g = Github(login_or_token="$GITHUB_TOKEN$")'
  
  # Slack
  - 'client = WebClient(token="$SLACK_TOKEN$")'
  - 'slack_token = "$SLACK_TOKEN$"'
  - 'bot = SlackBot("$SLACK_TOKEN$")'
  
  # Email/SMTP
  - 'server.login("$LOGIN$", "$PASSWORD$")'
  - 'smtp = smtplib.SMTP("$URL$", $PORT$)'
  - 'imap = imaplib.IMAP4_SSL("$URL$")'
  - 'mail.login("$LOGIN$", "$PASSWORD$")'
  
  # Cloud Services
  - 'service = build("gmail", "v1", credentials=creds)'
  - 'client = storage.Client.from_service_account_json("$PRIVATE_KEY$")'
  
  # Logging/Monitoring
  - 'logging.basicConfig(format="%(message)s", level=logging.INFO)'
  - 'sentry_sdk.init(dsn="$URL$")'
  - 'logger.info(f"API key: $TOKEN$")'
  
  # Config Files
  - 'config = {"api_key": "$TOKEN$", "secret": "$PASSWORD$"}'
  - 'settings = {"DATABASE_PASSWORD": "$PASSWORD$", "SECRET_KEY": "$TOKEN$"}'
  - 'API_TOKEN = "$TOKEN$"'
  - 'API_KEY = "$TOKEN$"'
  - 'SECRET = "$PASSWORD$"'
  
  # Crypto/Encryption
  - 'key = Fernet.generate_key(); cipher = Fernet("$TOKEN$")'
  - 'hash_object = hashlib.sha256("$PASSWORD$".encode())'
  - 'signature = hmac.new("$HMAC$".encode(), message.encode(), hashlib.sha256)'
  
  # Docker/Containers
  - 'client = docker.from_env(); container.exec_run("echo $PASSWORD$")'
  - 'client = kubernetes.client.ApiClient(configuration)'
  
  # File Operations
  - 'with open("config.json") as f: data = json.load(f); token = data["$TOKEN$"]'
  - 'yaml.safe_load(f)["credentials"]["$SECRET_VARIABLE$"]'
  
  # Testing
  - 'mock_response.headers = {"Authorization": "Bearer $JWT$"}'
  - 'assert response.json()["token"] == "$TOKEN$"'
  
  # Celery/Task Queues
  - 'app = Celery("tasks", broker="redis://:$PASSWORD$@$URL$")'
  - 'celery_app.conf.update(broker_url="amqp://$LOGIN$:$PASSWORD$@$URL$")'
 
java:
  # Spring Boot/Framework
  - 'spring.datasource.password=$PASSWORD$'
  - 'spring.datasource.url=jdbc:mysql://$URL$:$PORT$/db?user=$LOGIN$&password=$PASSWORD$'
  - '@Value("${api.key}") private String apiKey = "$TOKEN$";'
  - 'restTemplate.postForObject("$URL$", request, String.class)'
  - 'HttpHeaders headers = new HttpHeaders(); headers.setBearerAuth("$JWT$");'
  - 'spring.security.oauth2.client.registration.github.client-secret=$TOKEN$'
  - 'jwt.secret=$JWT$'
  - 'server.ssl.key-store-password=$PASSWORD$'
  
  # Database Connections
  - 'DriverManager.getConnection("jdbc:postgresql://$URL$", "$LOGIN$", "$PASSWORD$");'
  - 'MongoClients.create("mongodb://$LOGIN$:$PASSWORD$@$URL$");'
  - 'BasicDataSource(); dataSource.setPassword("$PASSWORD$");'
  
  # HTTP Clients
  - 'request.header("Authorization", "Bearer $JWT$");'
  - 'request.addHeader("X-API-Key", "$TOKEN$");'
  - 'request.setHeader("Authorization", "Basic $BASIC_AUTH$");'
  
  # AWS SDK
  - 'BasicAWSCredentials("$TOKEN$", "$TOKEN$");'
  
  # Properties/Configuration
  - 'props.setProperty("password", "$PASSWORD$");'
  - 'System.setProperty("api.key", "$TOKEN$");'
  - 'ConfigurationBuilder().oAuthAccessToken("$TOKEN$");'
  - 'String API_KEY = "$TOKEN$";'
  - 'String SECRET = "$PASSWORD$";'
  
  # JWT
  - 'Jwts.builder().setSubject("$LOGIN$").signWith(SignatureAlgorithm.HS256, "$JWT$")'
  - 'Jwts.parser().setSigningKey("$JWT$")'
  - 'Jwts.builder().signWith(Keys.hmacShaKeyFor("$JWT$".getBytes()));'
  
  # Security/Encryption
  - 'new SecretKeySpec("$TOKEN$".getBytes(), "AES");'
  - 'md.update("$PASSWORD$".getBytes());'
  - 'mac.init(new SecretKeySpec("$HMAC$".getBytes(), "HmacSHA256"));'
  
  # Email/SMTP
  - '{ return new PasswordAuthentication("$LOGIN$", "$PASSWORD$"); }});'
  - 'Transport.send(message, "$LOGIN$", "$PASSWORD$");'
  - 'props.put("mail.smtp.password", "$PASSWORD$");'
  
  # SSH/SFTP
  - 'session.setPassword("$PASSWORD$");'
  
  # GitHub API
  - 'withOAuthToken("$GITHUB_TOKEN$").build();'
  - 'newBuilder().header("Authorization", "token $GITHUB_TOKEN$").build())).build();'
  
  # Logging
  - 'logger.info("API Key: {}", "$TOKEN$");'
  - 'System.out.println("Secret: " + "$PASSWORD$");'
  - 'log.debug("Connecting with token: {$TOKEN$}");'
  
  # Slack SDK
  - 'slack.methods("$SLACK_TOKEN$");'
  - 'slackApi.setToken("$SLACK_TOKEN$");'
  
  # Docker/Containers
  - 'docker.auth(RegistryAuth.builder().password("$PASSWORD$").build());'
  - 'env("API_KEY=$TOKEN$").build();'
  
  # Testing/Mock
  - 'thenReturn("$TOKEN$");'
  - 'MockResponse().setHeader("Authorization", "Bearer $JWT$"));'
  - 'assertEquals("$TOKEN$", response.getToken());'
  - 'required username=\"$LOGIN$\" password=\"$PASSWORD$\";");'

javascript:
  # Node.js Environment Variables
  - 'process.env.API_KEY = "$TOKEN$"'
  - 'const secret = process.env.$SECRET_VARIABLE$ || "$DEFAULT_PASSWORD$"'
  - 'module.exports = { apiKey: "$TOKEN$", secret: "$PASSWORD$" }'
  
  # HTTP Requests/Fetch
  - 'fetch("$URL$", { headers: { "Authorization": "Bearer $JWT$" } })'
  - 'axios.get("$URL$", { headers: { "X-API-Key": "$TOKEN$" } })'
  - 'await fetch("$URL$", { method: "POST", headers: { "Authorization": "Basic $BASIC_AUTH$" } })'
  - 'request.post("$URL$").auth("$LOGIN$", "$PASSWORD$")'
  - 'superagent.get("$URL$").set("Authorization", "Bearer $JWT$")'
  - 'got("$URL$", { headers: { "Authorization": "Token $TOKEN$" } })'
  
  # Express.js
  - 'app.use(session({ secret: "$PASSWORD$", resave: false }))'
  - 'const token = jwt.sign(payload, "$JWT$")'
  - 'app.set("jwt-secret", "$JWT$")'
  - 'passport.use(new LocalStrategy("$LOGIN$", "$PASSWORD$", done))'
  - 'app.use(helmet({ contentSecurityPolicy: { directives: { "connect-src": ["$URL$"] } } }))'
  
  # Database Connections
  - 'MongoClient("mongodb://$LOGIN$:$PASSWORD$@$URL$")'
  - 'Pool({ host: "$URL$", user: "$LOGIN$", password: "$PASSWORD$" })'
  - 'Sequelize("database", "$LOGIN$", "$PASSWORD$", { host: "$URL$" })'
  - 'mongoose.connect("mongodb://$LOGIN$:$PASSWORD$@$URL$/db")'
  - 'redis.createClient({ password: "$PASSWORD$" })'
  
  # AWS SDK
  - 'AWS.config.update({ accessKeyId: "$TOKEN$", secretAccessKey: "$TOKEN$" })'
  - 'AWS.S3({ accessKeyId: "$TOKEN$", secretAccessKey: "$TOKEN$" })'
  - 'accessKeyId: "$TOKEN$", secretAccessKey: "$TOKEN$" } })'
  
  # JWT
  - 'const token = jwt.sign(payload, "$JWT$")'
  - 'jwt.verify(token, "$JWT$", (err, decoded) => {})'
  - 'const decoded = jwt.decode("$JWT$")'
  - 'localStorage.setItem("jwt", "$JWT$")'
  
  # GitHub API
  - 'Octokit({ auth: "$GITHUB_TOKEN$" })'
  - 'require("github-api")("$GITHUB_TOKEN$")'
  
  # Slack API
  - 'new WebClient("$SLACK_TOKEN$")'
  - 'SlackWebhook("$SLACK_TOKEN$")'
  - 'slack.send({ token: "$SLACK_TOKEN$", text: "Hello" })'
  
  # Telegram Bot
  - 'TelegramBot("$TELEGRAM_TOKEN$")'
  - 'new Telegraf("$TELEGRAM_TOKEN$")'
  - 'bot.token = "$TELEGRAM_TOKEN$"'
  
  # Configuration Objects
  - 'const config = { apiKey: "$TOKEN$", secret: "$PASSWORD$", url: "$URL$" }'
  - 'export default { API_TOKEN: "$TOKEN$", DB_PASSWORD: "$PASSWORD$" }'
  - 'window.config = { bearerToken: "$BEARER_TOKEN$" }'
  - 'JSON.parse(\{ "token": "$TOKEN$", "password": "$PASSWORD$" }\)'
  
  # Local Storage/Session Storage
  - 'localStorage.setItem("authToken", "$JWT$")'
  - 'sessionStorage.setItem("apiKey", "$TOKEN$")'
  - 'localStorage.getItem("$SECRET_VARIABLE$") || "$DEFAULT_PASSWORD$"'
  - 'document.cookie = "auth=$JWT$; secure; httponly"'
  
  # React/Frontend
  - 'common["Authorization"] = `Bearer ${API_KEY}`'
  - 'useState("$JWT$")'
  - '{ fetch("$URL$", { headers: { "X-API-Key": "$TOKEN$" } }) }, [])'
  - 'createContext({ apiKey: "$TOKEN$" })'
  
  # Vue.js
  - 'headers.common["Authorization"] = "Bearer $JWT$"'
  - '$store.commit("setToken", "$TOKEN$")'
  - 'axios.defaults.headers.common["X-API-Key"] = "$TOKEN$"'
  
  # Angular
  - 'new HttpHeaders({ "Authorization": "Bearer $JWT$" }) }'
  - 'http.get("$URL$", { headers: { "X-API-Key": "$TOKEN$" } })'
  - 'environment.apiKey = "$TOKEN$"'
  
  # Crypto/Encryption
  - '.update("$PASSWORD$").digest("hex")'
  - 'createHmac("sha256", "$HMAC$")'
  - 'crypto.createCipher("aes192", "$PASSWORD$")'
  - 'CryptoJS.AES.encrypt(message, "$PASSWORD$").toString()'
  
  # WebSocket
  - 'WebSocket("wss://$URL$", { headers: { "Authorization": "Bearer $JWT$" } })'
  - 'io("$URL$", { auth: { token: "$TOKEN$" } })'
  - 'socket.emit("authenticate", { token: "$JWT$" })'
  
  # Docker/DevOps
  - 'Docker({ socketPath: "/var/run/docker.sock" }); container.exec({ Env: ["API_KEY=$TOKEN$"] })'
  - 'JSON.stringify({ auths: { "registry.com": { auth: "$BASIC_AUTH$" } } })'
  
  # Testing/Mock
  - '({ getToken: () => "$TOKEN$" }))'
  - '.reply(200, { token: "$TOKEN$" })'
  - 'expect(response.data.token).toBe("$JWT$")'
  - '.returns("$TOKEN$")'
  
  # Logging
  - 'console.log("API Key:", "$TOKEN$")'
  - 'winston.info("Authentication token: %s", "$TOKEN$")'
  - 'logger.debug({ token: "$TOKEN$" }, "Authentication successful")'

password_in_url:
  # Database URLs
  - 'postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/database'
  - 'mysql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db'
  - 'mongodb://$LOGIN$:$PASSWORD$@$URL$:$PORT$/database'
  - 'redis://:$PASSWORD$@$URL$:$PORT$/0'
  - 'sqlite://$LOGIN$:$PASSWORD$@$URL$/database.db'
  - 'mssql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/database'
  - 'oracle://$LOGIN$:$PASSWORD$@$URL$:$PORT$/XE'
  - 'cassandra://$LOGIN$:$PASSWORD$@$URL$:$PORT$/keyspace'
  
  # API URLs with credentials
  - 'https://$LOGIN$:$PASSWORD$@api.$URL$/v1/endpoint'
  - 'http://$LOGIN$:$PASSWORD$@$URL$/api/data'
  - 'https://$TOKEN$:$PASSWORD$@github.com/user/repo.git'
  - 'https://$LOGIN$:$GITHUB_TOKEN$@github.com/user/repo.git'
  - 'ftp://$LOGIN$:$PASSWORD$@$URL$:$PORT$/files'
  - 'sftp://$LOGIN$:$PASSWORD$@$URL$:$PORT$/data'
  
  # Git repositories
  - 'git clone https://$LOGIN$:$PASSWORD$@gitlab.com/user/repo.git'
  - 'git remote add origin https://$LOGIN$:$GITHUB_TOKEN$@github.com/user/repo.git'
  - 'https://$LOGIN$:$PASSWORD$@bitbucket.org/user/repo.git'
  - 'https://oauth2:$TOKEN$@gitlab.com/user/repo.git'
  
  # Docker registries
  - 'docker login https://$LOGIN$:$PASSWORD$@registry.$URL$'
  - 'https://$LOGIN$:$PASSWORD$@registry.gitlab.com/project/image'
  - 'docker pull $LOGIN$:$PASSWORD$@private-registry.$URL$/image:tag'
  
  # Message queues
  - 'amqp://$LOGIN$:$PASSWORD$@$URL$:$PORT$/vhost'
  - 'rabbitmq://$LOGIN$:$PASSWORD$@$URL$:$PORT$/'
  - 'kafka://$LOGIN$:$PASSWORD$@$URL$:$PORT$/topic'
  - 'nats://$LOGIN$:$PASSWORD$@$URL$:$PORT$'
  
  # Cloud services
  - 'https://$TOKEN$:$PASSWORD$@storage.googleapis.com/bucket'
  - 's3://$TOKEN$:$TOKEN$@bucket.s3.$URL$.amazonaws.com'
  - 'azure://$LOGIN$:$PASSWORD$@account.blob.core.windows.net'
  
  # Web applications
  - 'https://$LOGIN$:$PASSWORD$@admin.$URL$/dashboard'
  - 'http://$LOGIN$:$PASSWORD$@$URL$:$PORT$/login'
  - 'https://$LOGIN$:$PASSWORD$@app.$URL$/api/v1'
  - 'ws://$LOGIN$:$PASSWORD$@$URL$:$PORT$/websocket'
  - 'wss://$LOGIN$:$PASSWORD$@$URL$/stream'
  
  # Mail servers
  - 'smtp://$LOGIN$:$PASSWORD$@$URL$:$PORT$'
  - 'imap://$LOGIN$:$PASSWORD$@mail.$URL$:$PORT$'
  - 'pop3://$LOGIN$:$PASSWORD$@$URL$:$PORT$'
  - 'smtps://$LOGIN$:$PASSWORD$@$URL$:465'
  
  # LDAP/Directory
  - 'ldap://$LOGIN$:$PASSWORD$@$URL$:$PORT$/dc=company,dc=com'
  - 'ldaps://$LOGIN$:$PASSWORD$@$URL$:636/ou=users'
  - 'activedirectory://$LOGIN$:$PASSWORD$@$URL$/domain'
  
  # Proxies
  - 'http://$LOGIN$:$PASSWORD$@proxy.$URL$:$PORT$'
  - 'socks5://$LOGIN$:$PASSWORD$@$URL$:$PORT$'
  - 'https://$LOGIN$:$PASSWORD$@vpn.$URL$:$PORT$'
  
  # File sharing
  - 'webdav://$LOGIN$:$PASSWORD$@$URL$/files'
  - 'cifs://$LOGIN$:$PASSWORD$@$URL$/share'
  - 'nfs://$LOGIN$:$PASSWORD$@$URL$/export'
  
  # Configuration URLs
  - 'jdbc:postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db'
  - 'jdbc:mysql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/database'
  - 'connection_string=Server=$URL$;Database=db;User Id=$LOGIN$;Password=$PASSWORD$'
  
  # API endpoints with auth
  - 'https://$TOKEN$@api.$URL$/v2/users'
  - 'http://$LOGIN$:$PASSWORD$@webhook.$URL$/callback'
  - 'https://$LOGIN$:$TOKEN$@api.$URL$/graphql'
  - 'wss://$TOKEN$:$PASSWORD$@realtime.$URL$/channel'

env:
  # Basic environment variables
  - 'export API_KEY="$TOKEN$"'
  - 'export SECRET_KEY="$PASSWORD$"'
  - 'export DATABASE_PASSWORD="$PASSWORD$"'
  - 'export JWT_SECRET="$JWT$"'
  - 'export GITHUB_TOKEN="$GITHUB_TOKEN$"'
  - 'export SLACK_TOKEN="$SLACK_TOKEN$"'
  - 'export TELEGRAM_BOT_TOKEN="$TELEGRAM_TOKEN$"'
  
  # Database environment variables
  - 'export DB_HOST="$URL$"'
  - 'export DB_USER="$LOGIN$"'
  - 'export DB_PASSWORD="$PASSWORD$"'
  - 'export DB_PORT="$PORT$"'
  - 'export DATABASE_URL="postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db"'
  - 'export REDIS_URL="redis://:$PASSWORD$@$URL$:$PORT$"'
  - 'export MONGODB_URI="mongodb://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db"'
  
  # Azure
  - 'export AZURE_CLIENT_ID="$UUID$"'
  - 'export AZURE_CLIENT_SECRET="$TOKEN$"'
  - 'export AZURE_TENANT_ID="$UUID$"'
  
  # Docker environment
  - 'export DOCKER_REGISTRY_USER="$LOGIN$"'
  - 'export DOCKER_REGISTRY_PASSWORD="$PASSWORD$"'
  - 'export DOCKER_HOST="tcp://$URL$:$PORT$"'
  
  # CI/CD variables
  - 'export CI_REGISTRY_PASSWORD="$PASSWORD$"'
  - 'export CI_JOB_TOKEN="$TOKEN$"'
  - 'export GITLAB_TOKEN="$TOKEN$"'
  - 'export JENKINS_API_TOKEN="$TOKEN$"'
  
  # Application secrets
  - 'export SESSION_SECRET="$PASSWORD$"'
  - 'export ENCRYPTION_KEY="$TOKEN$"'
  - 'export SIGNING_KEY="$HMAC$"'
  - 'export WEBHOOK_SECRET="$TOKEN$"'
  - 'export API_SECRET="$PASSWORD$"'
  
  # SSH/Git
  - 'export SSH_PRIVATE_KEY="$SSH_PRIVATE_KEY$"'
  - 'export GIT_TOKEN="$GITHUB_TOKEN$"'
  - 'export DEPLOY_KEY="$SSH_PRIVATE_KEY$"'
  
  # Monitoring/Logging
  - 'export DATADOG_API_KEY="$TOKEN$"'
  - 'export NEW_RELIC_LICENSE_KEY="$TOKEN$"'
  - 'export LOGZ_IO_TOKEN="$TOKEN$"'
  - 'export ELASTIC_PASSWORD="$PASSWORD$"'
  
  # Cache/Storage
  - 'export REDIS_PASSWORD="$PASSWORD$"'
  - 'export MEMCACHED_PASSWORD="$PASSWORD$"'
  - 'export S3_ACCESS_KEY="$TOKEN$"'
  - 'export S3_SECRET_KEY="$TOKEN$"'
  
  # OAuth/Auth
  - 'export OAUTH_CLIENT_SECRET="$TOKEN$"'
  - 'export AUTH0_CLIENT_SECRET="$TOKEN$"'
  - 'export GOOGLE_CLIENT_SECRET="$TOKEN$"'
  - 'export FACEBOOK_APP_SECRET="$TOKEN$"'
  
  # .env file format
  - 'API_KEY=$TOKEN$'
  - 'DATABASE_PASSWORD=$PASSWORD$'
  - 'JWT_SECRET=$JWT$'
  - 'GITHUB_TOKEN=$GITHUB_TOKEN$'
  - 'SLACK_WEBHOOK_URL=https://hooks.slack.com/services/$TOKEN$'

conf:
  # Apache/HTTPD
  - 'ProxyPass / http://$URL$:$PORT$/'
  
  # Nginx
  - 'proxy_pass http://$URL$:$PORT$/;'
  - 'upstream backend { server $URL$:$PORT$; }'
  
  # Redis
  - 'requirepass $PASSWORD$'
  - 'masterauth $PASSWORD$'
  
  # Docker Compose
  - DATABASE_URL=postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db'
  
  # Grafana
  - 'url = mysql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/grafana'
  
  # GitLab CI
  - 'DATABASE_URL: postgresql://$LOGIN$:$PASSWORD$@$URL$/db'
  
  # Ansible
  - '$URL$ ansible_user=$LOGIN$ ansible_password=$PASSWORD$'
  
  # Logstash
  - 'user => "$LOGIN$" password => "$PASSWORD$"}}'

git:
  # Git clone with credentials
  - 'git clone https://$LOGIN$:$PASSWORD$@github.com/user/repo.git'
  - 'git clone https://$LOGIN$:$GITHUB_TOKEN$@github.com/user/repo.git'
  - 'git clone https://oauth2:$TOKEN$@gitlab.com/user/repo.git'
  - 'git clone https://$GITHUB_TOKEN$@github.com/user/repo.git'
  
  # Git remote URLs
  - 'git remote add origin https://$LOGIN$:$GITHUB_TOKEN$@github.com/user/repo.git'
  - 'git remote set-url origin https://$LOGIN$:$PASSWORD$@gitlab.com/user/repo.git'
  - 'git push https://$LOGIN$:$GITHUB_TOKEN$@github.com/user/repo.git'
  
  # Git config
  - 'git config --global url."https://$GITHUB_TOKEN$@github.com/".insteadOf "https://github.com/"'
  
  # .netrc file
  - 'machine github.com login $LOGIN$ password $GITHUB_TOKEN$'
  - 'machine gitlab.com login $LOGIN$ password $TOKEN$'
  - 'machine bitbucket.org login $LOGIN$ password $PASSWORD$'
  
  # .git-credentials
  - 'https://$LOGIN$:$GITHUB_TOKEN$@github.com'
  - 'https://$LOGIN$:$PASSWORD$@gitlab.com'
  - 'https://oauth2:$TOKEN$@bitbucket.org'

slack_token:
  # Slack SDK/API calls
  - 'new WebClient("$SLACK_TOKEN$");'
  - 'WebClient(token="$SLACK_TOKEN$")'
  - 'slack.methods("$SLACK_TOKEN$");'
  - 'SlackApi("$SLACK_TOKEN$");'
  
  # HTTP requests to Slack API
  - 'curl -H "Authorization: Bearer $SLACK_TOKEN$"'
  - 'requests.post(headers={"Authorization": "Bearer $SLACK_TOKEN$"})'
  - 'fetch({ headers: { "Authorization": "Bearer $SLACK_TOKEN$" } })'
  
  # Environment variables
  - 'export SLACK_TOKEN="$SLACK_TOKEN$"'
  - 'SLACK_BOT_TOKEN=$SLACK_TOKEN$'
  - 'SLACK_API_TOKEN=$SLACK_TOKEN$'
  
  # Configuration files
  - 'slack_token: "$SLACK_TOKEN$"'
  - 'token=$SLACK_TOKEN$'
  - 'api_key=$SLACK_TOKEN$'
  
  # Webhooks
  - 'webhook_url=$URL$/$SLACK_TOKEN$'
  - 'curl -X POST $URL$/$SLACK_TOKEN$ -H "Content-type: application/json"'

c:
  # String literals with secrets
  - 'char* api_key = "$TOKEN$";'
  - 'const char* password = "$PASSWORD$";'
  - 'char auth_token[] = "$JWT$";'
  - '#define API_SECRET "$TOKEN$"'
  - 'static const char* db_password = "$PASSWORD$";'
  
  # Function calls with secrets
  - 'connect_db("$URL$", "$LOGIN$", "$PASSWORD$");'
  - 'authenticate("$LOGIN$", "$PASSWORD$");'
  - 'curl_easy_setopt(curl, CURLOPT_USERPWD, "$LOGIN$:$PASSWORD$");'
  - 'ssl_connect("$URL$", "$PRIVATE_KEY$");'
  
  # Environment variable access
  - 'char* token = getenv("$SECRET_VARIABLE$");'
  - 'setenv("API_KEY", "$TOKEN$", 1);'
  - 'if (getenv("$SECRET_VARIABLE$") == NULL) password = "$DEFAULT_PASSWORD$";'
  
  # HTTP headers
  - 'sprintf(header, "Authorization: Bearer %s", "$JWT$");'
  - 'curl_easy_setopt(curl, CURLOPT_HTTPHEADER, "X-API-Key: $TOKEN$");'
  - 'snprintf(auth, sizeof(auth), "Basic %s", "$BASIC_AUTH$");'
  
  # Configuration structs
  - 'config.api_key = "$TOKEN$";'
  - 'settings.database_url = "postgresql://$LOGIN$:$PASSWORD$@$URL$";'
  - 'server_config.ssl_key = "$PRIVATE_KEY$";'
  
  # File operations
  - 'FILE* fp = fopen("/etc/passwd", "r"); /* contains $LOGIN$:$PASSWORD$ */'
  - 'fprintf(config_file, "password=%s\\n", "$PASSWORD$");'
  - 'write_config("api_token", "$TOKEN$");'

other:
  - "Authorization: Basic $BASIC_AUTH$"
  - "auth_header = \"Basic $BASIC_AUTH$\""
  - "curl -u \"$BASIC_AUTH$\" $URL$"
  - "requests.get(\"$URL$\", auth=(\"$BASIC_AUTH$\".split(\":\")[0], \"$BASIC_AUTH$\".split(\":\")[1]))"
  - 'axios.get("$URL$", { headers: { Authorization: `Basic $BASIC_AUTH$` } })'
  - 'fetch("$URL$", { headers: { Authorization: "Basic $BASIC_AUTH$" } })'
  - "ssh_private_key = \"\"\"$SSH_PRIVATE_KEY$\"\"\""
  - "$SSH_PRIVATE_KEY$"
  - "$SSH_PRIVATE_KEY$"
  - "ssh -i /path/to/key <<< \"$SSH_PRIVATE_KEY$\""
  - "private_key = \"$SSH_PRIVATE_KEY$\""
  - "os.environ[\"SSH_KEY\"] = \"$SSH_PRIVATE_KEY$\""
  - "signature = hmac.new(secret.encode(), msg.encode(), hashlib.sha256).hexdigest()  # $HMAC$"
  - "hmac_signature = \"$HMAC$\""
  - "X-Hub-Signature: sha1=$HMAC$"
  - "X-Signature: $HMAC$"
  - "headers = {\"X-Signature\": \"$HMAC$\"}"
  - "curl -H \"X-Hub-Signature: $HMAC$\" $URL$"
  - "webhook_signature=\"$HMAC$\""
  - "password = \"$DEFAULT_PASSWORD$\""
  - "passwd = \"$DEFAULT_PASSWORD$\""
  - "os.environ[\"DEFAULT_PASSWORD\"] = \"$DEFAULT_PASSWORD$\""
  - "config[\"password\"] = \"$DEFAULT_PASSWORD$\""
  - '"default_password": "$DEFAULT_PASSWORD$"'
  - "credentials = {\"username\": \"admin\", \"password\": \"$DEFAULT_PASSWORD$\"}"
  - "user: admin\\npass: $DEFAULT_PASSWORD$"
  - "export PASSWORD=\"$DEFAULT_PASSWORD$\""
  - "curl -u admin:$DEFAULT_PASSWORD$ $URL$"
  - "spring.datasource.password=$DEFAULT_PASSWORD$"
  - "-Ddb.password=$DEFAULT_PASSWORD$"
  - "db_password=\"$DEFAULT_PASSWORD$\""
  - '"auth": { "password": "$DEFAULT_PASSWORD$" }'

  # Command line tools
  - 'curl -u $LOGIN$:$PASSWORD$ $URL$'
  - 'wget --user=$LOGIN$ --password=$PASSWORD$ $URL$'
  - 'scp -i $SSH_PRIVATE_KEY$ file.txt $LOGIN$@$URL$:$PORT$'
  - 'ssh -i $SSH_PRIVATE_KEY$ $LOGIN$@$URL$ -p $PORT$'
  - 'rsync -e "ssh -i $SSH_PRIVATE_KEY$" file.txt $LOGIN$@$URL$:/'
  
  # Mixed authentication
  - 'Authorization: Basic $BASIC_AUTH$, Bearer $JWT$'
  - 'X-API-Key: $TOKEN$, X-Secret: $PASSWORD$'
  - 'Cookie: session=$JWT$; auth=$TOKEN$'
  - 'Basic $LOGIN$:$PASSWORD$@$URL$:$PORT$ with token $TOKEN$'
  
  # Log entries
  - 'INFO: User $LOGIN$ authenticated with token $TOKEN$ from $URL$'
  - 'ERROR: Failed to connect to $URL$:$PORT$ with credentials $LOGIN$:$PASSWORD$'
  - 'DEBUG: JWT token $JWT$ expired for user $LOGIN$'
  - 'WARN: Unauthorized access attempt with key $TOKEN$ from $URL$'
  
  # Configuration snippets
  - 'server=$URL$:$PORT$, user=$LOGIN$, pass=$PASSWORD$, token=$TOKEN$'
  - 'endpoint=$URL$, auth=$BASIC_AUTH$, timeout=30'
  - 'host=$URL$, port=$PORT$, ssl_key=$PRIVATE_KEY$, password=$PASSWORD$'
  - 'redis_url=redis://:$PASSWORD$@$URL$:$PORT$, api_key=$TOKEN$'
  
  # JSON/XML fragments
  - '{"host": "$URL$", "user": "$LOGIN$", "password": "$PASSWORD$", "port": $PORT$}'
  - '<config><server>$URL$:$PORT$</server><auth>$LOGIN$:$PASSWORD$</auth></config>'
  - '{"jwt": "$JWT$", "refresh": "$TOKEN$", "endpoint": "$URL$"}'
  - '<credentials user="$LOGIN$" password="$PASSWORD$" token="$TOKEN$"/>'
  
  # Docker/Container commands
  - 'docker run -e API_KEY=$TOKEN$ -e DB_PASS=$PASSWORD$ app:latest'
  - 'docker login -u $LOGIN$ -p $PASSWORD$ registry.$URL$'
  - 'kubectl create secret generic mysecret --from-literal=password=$PASSWORD$ --from-literal=token=$TOKEN$'
  - 'helm install app --set database.password=$PASSWORD$ --set api.token=$TOKEN$'
  
  # Network/Protocol configs
  - 'ftp://$LOGIN$:$PASSWORD$@$URL$:$PORT$/path'
  - 'ldap://$LOGIN$:$PASSWORD$@$URL$:$PORT$/dc=company,dc=com'
  - 'smb://$LOGIN$:$PASSWORD$@$URL$/share'
  - 'telnet $URL$ $PORT$ (login: $LOGIN$, password: $PASSWORD$)'
  
  # Backup/Sync commands
  - 'mysqldump -h $URL$ -P $PORT$ -u $LOGIN$ -p$PASSWORD$ database'
  - 'pg_dump postgresql://$LOGIN$:$PASSWORD$@$URL$:$PORT$/db'
  - 'aws s3 sync . s3://bucket --profile default (key: $TOKEN$)'
  - 'rclone copy local: remote: --config password=$PASSWORD$'
  
  # Monitoring/Health checks
  - 'curl -H "Authorization: Bearer $JWT$" $URL$:$PORT$/health'
  - 'ping $URL$ && telnet $URL$ $PORT$ (auth: $LOGIN$:$PASSWORD$)'
  - 'nc -zv $URL$ $PORT$ # credentials stored: $TOKEN$'
  - 'nmap -p $PORT$ $URL$ # access via $LOGIN$:$PASSWORD$'
  
  # API testing
  - 'POST $URL$/api/login {"username": "$LOGIN$", "password": "$PASSWORD$"}'
  - 'GET $URL$/api/data?token=$TOKEN$&key=$PASSWORD$'
  - 'curl -X POST $URL$ -H "X-Token: $TOKEN$" -d "secret=$PASSWORD$"'
  - 'httpie POST $URL$/auth username=$LOGIN$ password=$PASSWORD$ token:=$JWT$'
  
  # Certificate/SSL
  - 'openssl req -new -key $PRIVATE_KEY$ -out cert.csr'
  - 'keytool -import -file cert.crt -keystore keystore.jks -storepass $PASSWORD$'
  - 'SSL_CERT=$URL$.crt SSL_KEY=$PRIVATE_KEY$ nginx'
  - 'certbot certonly --webroot -w /var/www -d $URL$ --email admin@$URL$'
  
  # Development/Testing
  - 'mock_auth = {"user": "$LOGIN$", "pass": "$PASSWORD$", "token": "$JWT$"}'
  - 'test_config = {"api_url": "$URL$", "api_key": "$TOKEN$", "timeout": 30}'
  - 'selenium.get("$URL$"); selenium.find_element("password").send_keys("$PASSWORD$")'
  - 'newman run collection.json --env-var token=$TOKEN$ --env-var url=$URL$'
  
  # Incident/Security
  - 'ALERT: Suspicious login $LOGIN$:$PASSWORD$ from $URL$:$PORT$'
  - 'BREACH: Token $TOKEN$ compromised, rotating keys'
  - 'AUDIT: User $LOGIN$ accessed $URL$ with JWT $JWT$'
  - 'SECURITY: Failed SSH attempt with key $SSH_PRIVATE_KEY$ to $URL$'
  
  # Mixed service integrations
  - 'slack_webhook=$SLACK_TOKEN$, telegram_bot=$TELEGRAM_TOKEN$, github_key=$GITHUB_TOKEN$'
  - 'sso_config: provider=$URL$, client_secret=$TOKEN$, redirect=$URL$/callback'
  - 'payment_gateway: api_key=$TOKEN$, webhook_secret=$HMAC$, endpoint=$URL$'
  - 'cdn_config: host=$URL$, token=$TOKEN$, ssl_cert=$PRIVATE_KEY$'

other2:
  - "token=$TOKEN$"
  - "token=$TOKEN$[7:30]"
  - "token = $TOKEN$[7:30]"
  - "token: $TOKEN$[7:30]"

  - "Token=$TOKEN$"
  - "Token=$TOKEN$[7:30]"
  - "Token = $TOKEN$[7:30]"
  - "Token: $TOKEN$[7:30]"

  - "apikey=$TOKEN$"
  - "apikey=$TOKEN$[10:28]"
  - "apikey = $TOKEN$[10:28]"
  - "apikey: $TOKEN$[10:28]"
  
  - "api_key=$TOKEN$"
  - "api_key=$TOKEN$[10:28]"
  - "api_key = $TOKEN$[10:28]"
  - "api_key: $TOKEN$[10:28]"
  
  - "API_KEY=$TOKEN$"
  - "API_KEY=$TOKEN$[10:28]"
  - "API_KEY = $TOKEN$[10:28]"
  - "API_KEY: $TOKEN$[10:28]"
  
  - "ApiKey=$TOKEN$"
  - "ApiKey=$TOKEN$[10:28]"
  - "ApiKey = $TOKEN$[10:28]"
  - "ApiKey: $TOKEN$[10:28]"
    
  - "secret_key=$TOKEN$"
  - "secret_key=$TOKEN$[10:28]"
  - "secret_key = $TOKEN$[10:28]"
  - "secret_key: $TOKEN$[10:28]"
    
  - "SecretKey=$TOKEN$"
  - "SecretKey=$TOKEN$[10:28]"
  - "SecretKey = $TOKEN$[10:28]"
  - "SecretKey: $TOKEN$[10:28]"
      
  - "Passwd=$TOKEN$"
  - "Passwd=$TOKEN$[10:28]"
  - "Passwd = $TOKEN$[10:28]"
  - "Passwd: $TOKEN$[10:28]"
      
  - "secret=$TOKEN$"
  - "secret=$TOKEN$[10:28]"
  - "secret = $TOKEN$[10:28]"
  - "secret: $TOKEN$[10:28]"
      
  - "Creds=$TOKEN$"
  - "Creds=$TOKEN$[10:28]"
  - "Creds = $TOKEN$[10:28]"
  - "Creds: $TOKEN$[10:28]"
      
  - "password=$TOKEN$"
  - "password=$TOKEN$[10:28]"
  - "password = $TOKEN$[10:28]"
  - "password: $TOKEN$[10:28]"
  
  # Simple combinations
  - '$URL$/$PORT$:$LOG:PASS$'
  - '$LOGIN$:$TOKEN$'
  - '$TELEGRAM_TOKEN$'
  - '$SLACK_TOKEN$'
  - '$GITHUB_TOKEN$'
  - '$JWT$'
  - '$PASSWORD$'
  - '$BEARER_TOKEN$'
  - '$BASIC_AUTH$'
  - '$PRIVATE_KEY$'
  - '$SSH_PRIVATE_KEY$'
  - '$KEYTAB$'
  - '$HMAC$'
  
  # URL combinations
  - '$URL$/$TOKEN$'
  - '$URL$?key=$TOKEN$'
  - '$URL$/$LOGIN$:$PASSWORD$'
  - '$URL$:$PORT$/$TOKEN$'
  - '$URL$?token=$JWT$'
  - '$URL$/$GITHUB_TOKEN$'
  - '$URL$?auth=$BASIC_AUTH$'
  
  # Auth combinations
  - '$LOGIN$:$PASSWORD$'
  - '$LOGIN$@$TOKEN$'
  - '$TOKEN$:$PASSWORD$'
  - '$LOGIN$/$GITHUB_TOKEN$'
  - '$BEARER_TOKEN$:$PASSWORD$'
  - '$LOGIN$:$JWT$'
  
  # Token sequences
  - '$TOKEN$,$JWT$'
  - '$GITHUB_TOKEN$|$SLACK_TOKEN$'
  - '$TOKEN$;$PASSWORD$'
  - '$JWT$,$BEARER_TOKEN$'
  - '$TELEGRAM_TOKEN$,$SLACK_TOKEN$'
  - '$TOKEN$:$HMAC$'
  
  # Multi-part secrets
  - '$LOGIN$@$URL$:$PORT$'
  - '$TOKEN$@$URL$'
  - '$PASSWORD$@$URL$:$PORT$'
  - '$JWT$@$URL$/$TOKEN$'
  - '$LOGIN$:$PASSWORD$@$URL$'
  - '$BASIC_AUTH$@$URL$:$PORT$'
  
  # Path-like structures
  - '$TOKEN$/$PASSWORD$/$LOGIN$'
  - '$URL$/$GITHUB_TOKEN$/$TOKEN$'
  - '$LOGIN$/$PASSWORD$/$JWT$'
  - '$SLACK_TOKEN$/$TELEGRAM_TOKEN$'
  - '$TOKEN$/$HMAC$/$PASSWORD$'
  
  # Key-value like
  - '$LOGIN$=$PASSWORD$'
  - '$TOKEN$=$JWT$'
  - '$URL$=$LOGIN$:$PASSWORD$'
  - '$GITHUB_TOKEN$=$TOKEN$'
  - '$SLACK_TOKEN$=$BEARER_TOKEN$'