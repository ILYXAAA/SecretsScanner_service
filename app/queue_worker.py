import asyncio
from app.models import ScanRequest
from app.repo_utils import download_repo, delete_dir
from app.scanner import scan_repo
import aiohttp
import os
import tempfile
import random
import string
from dotenv import load_dotenv

load_dotenv()
task_queue = asyncio.Queue()
HubType = os.getenv("HubType")

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
download_semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
model_semaphore = asyncio.Semaphore(2)  # –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∞ –º–æ–¥–µ–ª–∏

async def add_to_queue_background(request: ScanRequest, commit: str):
    await task_queue.put((request, commit))
    print(f"üì• –ü—Ä–æ–µ–∫—Ç {request.ProjectName} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

async def start_worker():
    """–í–æ—Ä–∫–µ—Ä —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ"""
    while True:
        request, commit = await task_queue.get()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        asyncio.create_task(process_request_async(request, commit))
        task_queue.task_done()

async def process_request_async(request: ScanRequest, commit: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Å–µ–º–∞—Ñ–æ—Ä–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    temp_dir = tempfile.mkdtemp(dir="C:\\")
    
    try:
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {request.ProjectName}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        async with download_semaphore:
            print(f"üì• –°–∫–∞—á–∏–≤–∞—é {request.ProjectName}")
            extracted_repo_path, status_message = await download_repo(request.RepoUrl, commit, temp_dir)
        
        if extracted_repo_path:
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {request.ProjectName}")
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–±—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            results, all_files_count = await scan_repo_concurrent(request, extracted_repo_path, request.ProjectName)

            payload = {
                "Status": "completed",
                "Message": "Scanned Successfully",
                "ProjectName": request.ProjectName,
                "ProjectRepoUrl": request.RepoUrl,
                "RepoCommit": commit,
                "Results": results,
                "FilesScanned": all_files_count
            }

            async with aiohttp.ClientSession() as session:
                await session.post(request.CallbackUrl, json=payload)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {request.ProjectName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ CallbackUrl")
        else:
            payload = {
                "Status": "Error",
                "Message": status_message,
                "ProjectName": request.ProjectName
            }
            async with aiohttp.ClientSession() as session:
                await session.post(request.CallbackUrl, json=payload)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {request.ProjectName}: {e}")
        async with aiohttp.ClientSession() as session:
            payload = {
                "Status": "Error",
                "Message": f"{str(e)}",
                "ProjectName": request.ProjectName
            }
            await session.post(request.CallbackUrl, json=payload)
    finally:
        delete_dir(temp_dir)

async def scan_repo_concurrent(request, repo_path, projectName):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    from app.model_loader import get_model_instance
    from app.scanner import scan_directory, load_rules
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    rules = load_rules("Settings/rules.yml")
    print(f"üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ {projectName}")
    
    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –º–æ–¥–µ–ª–∏)
    results, all_files_count = await scan_directory(request, repo_path, rules)
    
    print(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è {projectName}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    async with model_semaphore:
        model = get_model_instance()
        sevveritied_secrets = await asyncio.get_event_loop().run_in_executor(
            None, model.filter_secrets, results
        )
    
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è {projectName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return sevveritied_secrets, all_files_count