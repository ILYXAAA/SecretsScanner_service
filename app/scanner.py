import os
import asyncio
import yaml
import re
from app.model_loader import get_model_instance
import aiohttp
from concurrent.futures import ThreadPoolExecutor

with open('Settings/excluded_files.yml', 'r') as f:
    data = yaml.safe_load(f)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
EXCLUDED_FILES = set(data.get('excluded_files', []))

with open('Settings/excluded_extensions.yml', 'r') as f:
    data = yaml.safe_load(f)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
EXCLUDED_EXTENSIONS = set(data.get('excluded_extensions', []))

RULES_FILE = "Settings/rules.yml"

def load_rules(rules_file="Settings/rules.yml"):
    try:
        with open(rules_file, "r", encoding="UTF-8") as f:
            return yaml.safe_load(f)
    except Exception as error:
        print(f"Error: {str(error)} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª ${rules_file}$ —Å –Ω–∞–±–æ—Ä–æ–º –ø—Ä–∞–≤–∏–ª.")

def count_files(target_dir):
    count = 0
    for root, _, files in os.walk(target_dir):
        count += len(files)
    return count

def _analyze_file_sync(file_path, rules, target_dir):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    results = []
    try:
        with open(file_path, "r", encoding="UTF-8", errors="ignore") as f:
            lines = f.readlines()

        for line_num, line in enumerate(lines, start=1):
            for rule in rules:
                match = re.search(rule["pattern"], line)
                if match:
                    secret = match.group(0)
                    context = line.strip()
                    results.append({
                        "path": file_path.replace(target_dir, "").replace("\\", "/"),
                        "line": line_num,
                        "secret": secret,
                        "context": context,
                        "severity": "",
                        "Type": rule.get("message", "Unknown")
                    })
    except Exception as error:
        print(f"‚ùå Error: {str(error)} ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}")
    
    return results

async def search_secrets(file_path, rules, target_dir, timeout=60):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        loop = asyncio.get_event_loop()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        with ThreadPoolExecutor(max_workers=1) as executor:
            future = loop.run_in_executor(
                executor, 
                _analyze_file_sync, 
                file_path, 
                rules, 
                target_dir
            )
            
            # –¢–µ–ø–µ—Ä—å —Ç–∞–π–º–∞—É—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            return await asyncio.wait_for(future, timeout=timeout)
            
    except asyncio.TimeoutError:
        results = [{
            "path": file_path.replace(target_dir, "").replace("\\", "/"),
            "line": 0,
            "secret": "–§–ê–ô–õ –ù–ï –°–ö–ê–ù–ò–†–û–í–ê–õ–°–Ø —Ç.–∫. –µ–≥–æ –∞–Ω–∞–ª–∏–∑ —É–ø–∞–ª –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é",
            "context": "–§–ê–ô–õ –ù–ï –°–ö–ê–ù–ò–†–û–í–ê–õ–°–Ø —Ç.–∫. –µ–≥–æ –∞–Ω–∞–ª–∏–∑ —É–ø–∞–ª –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é",
            "severity": "High",
            "Type": "Unknown"
        }]
        print(f"‚è±Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞: {file_path}")
        return results
    except Exception as error:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {str(error)}")
        return []

async def scan_directory(request, target_dir, rules):
    all_results = []
    file_list = []
    all_files_count = 0

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    for root, _, files in os.walk(target_dir):
        for file in files:           
            file_ext = file.split(".")[-1].lower()
            if file_ext in EXCLUDED_EXTENSIONS or file in EXCLUDED_FILES:
                continue
            file_list.append(os.path.join(root, file))

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(file_list)}")
    
    SEND_PARTIAL_EVERY = max(1, len(file_list) // 10)
    
    for file_path in file_list:
        all_files_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if all_files_count % SEND_PARTIAL_EVERY == 0:
            payload = {
                "Status": "partial",
                "FilesScanned": all_files_count
            }
            
            try:
                async with aiohttp.ClientSession() as session:
                    await session.post(request.CallbackUrl, json=payload)
                print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {all_files_count}/{len(file_list)}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª {all_files_count}/{len(file_list)}: {file_path}")
        results = await search_secrets(file_path, rules, target_dir)
        all_results.extend(results)

    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {all_files_count}")
    return all_results, all_files_count

async def scan_repo(request, repo_path, projectName):
    model = get_model_instance()
    rules = load_rules(RULES_FILE)
    print(f"‚úÖ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {projectName}")
    results, all_files_count = await scan_directory(request, repo_path, rules)
    print("–î–ò–†–ï–ö–¢–û–†–ò–Ø –ü–†–û–°–ö–ê–ù–ò–†–û–í–ê–ù–ê –ù–ê–ß–ò–ù–ê–Æ –í–ê–õ–ò–î–ê–¶–ò–Æ")
    sevveritied_secrets = model.filter_secrets(results)

    return sevveritied_secrets, all_files_count



# async def scan_repo(repo_path): # path - –î–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–µ
#     results = []
#     all_files_count = 0
#     for root, _, files in os.walk(repo_path):
#         for f in files:
#             all_files_count += 1
#             if f.endswith(".txt"):
#                 path = os.path.join(root, f)
#                 try:
#                     with open(path, "r", encoding="utf-8") as file:
#                         for i, line in enumerate(file, 1):
#                             if "password" in line.lower():
#                                 normal_path = path.replace(repo_path, '').replace('\\', '/')
#                                 # full_path = f"{RepoUrl}/{tmp_str}"
#                                 # print(f"FILE: {normal_path}")
#                                 results.append({
#                                     "path": normal_path,
#                                     "line": i,
#                                     "secret": "password",
#                                     "context": line.strip(),
#                                     "severity": "High",
#                                     "Type": "PASSWORD"
#                                 })
#                 except:
#                     continue
#     print(f"–î–µ–ª–∞–µ–º –≤–∏–¥ —á—Ç–æ –¥—É–º–∞–µ–º 10 —Å–µ–∫—É–Ω–¥")
#     await asyncio.sleep(10)
#     return results, all_files_count
